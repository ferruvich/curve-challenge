// Code generated by MockGen. DO NOT EDIT.
// Source: middleware.go

// Package middleware is a generated GoMock package.
package middleware

import (
	database "github.com/ferruvich/curve-prepaid-card/internal/database"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMiddleware is a mock of Middleware interface
type MockMiddleware struct {
	ctrl     *gomock.Controller
	recorder *MockMiddlewareMockRecorder
}

// MockMiddlewareMockRecorder is the mock recorder for MockMiddleware
type MockMiddlewareMockRecorder struct {
	mock *MockMiddleware
}

// NewMockMiddleware creates a new mock instance
func NewMockMiddleware(ctrl *gomock.Controller) *MockMiddleware {
	mock := &MockMiddleware{ctrl: ctrl}
	mock.recorder = &MockMiddlewareMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMiddleware) EXPECT() *MockMiddlewareMockRecorder {
	return m.recorder
}

// DataBase mocks base method
func (m *MockMiddleware) DataBase() database.DataBase {
	ret := m.ctrl.Call(m, "DataBase")
	ret0, _ := ret[0].(database.DataBase)
	return ret0
}

// DataBase indicates an expected call of DataBase
func (mr *MockMiddlewareMockRecorder) DataBase() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DataBase", reflect.TypeOf((*MockMiddleware)(nil).DataBase))
}

// AuthorizationRequest mocks base method
func (m *MockMiddleware) AuthorizationRequest() AuthorizationRequest {
	ret := m.ctrl.Call(m, "AuthorizationRequest")
	ret0, _ := ret[0].(AuthorizationRequest)
	return ret0
}

// AuthorizationRequest indicates an expected call of AuthorizationRequest
func (mr *MockMiddlewareMockRecorder) AuthorizationRequest() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthorizationRequest", reflect.TypeOf((*MockMiddleware)(nil).AuthorizationRequest))
}

// Card mocks base method
func (m *MockMiddleware) Card() Card {
	ret := m.ctrl.Call(m, "Card")
	ret0, _ := ret[0].(Card)
	return ret0
}

// Card indicates an expected call of Card
func (mr *MockMiddlewareMockRecorder) Card() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Card", reflect.TypeOf((*MockMiddleware)(nil).Card))
}

// Merchant mocks base method
func (m *MockMiddleware) Merchant() Merchant {
	ret := m.ctrl.Call(m, "Merchant")
	ret0, _ := ret[0].(Merchant)
	return ret0
}

// Merchant indicates an expected call of Merchant
func (mr *MockMiddlewareMockRecorder) Merchant() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Merchant", reflect.TypeOf((*MockMiddleware)(nil).Merchant))
}

// Transaction mocks base method
func (m *MockMiddleware) Transaction() Transaction {
	ret := m.ctrl.Call(m, "Transaction")
	ret0, _ := ret[0].(Transaction)
	return ret0
}

// Transaction indicates an expected call of Transaction
func (mr *MockMiddlewareMockRecorder) Transaction() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transaction", reflect.TypeOf((*MockMiddleware)(nil).Transaction))
}

// User mocks base method
func (m *MockMiddleware) User() User {
	ret := m.ctrl.Call(m, "User")
	ret0, _ := ret[0].(User)
	return ret0
}

// User indicates an expected call of User
func (mr *MockMiddlewareMockRecorder) User() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockMiddleware)(nil).User))
}
