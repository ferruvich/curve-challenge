// Code generated by MockGen. DO NOT EDIT.
// Source: transaction.go

// Package middleware is a generated GoMock package.
package middleware

import (
	model "github.com/ferruvich/curve-prepaid-card/internal/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTransaction is a mock of Transaction interface
type MockTransaction struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionMockRecorder
}

// MockTransactionMockRecorder is the mock recorder for MockTransaction
type MockTransactionMockRecorder struct {
	mock *MockTransaction
}

// NewMockTransaction creates a new mock instance
func NewMockTransaction(ctrl *gomock.Controller) *MockTransaction {
	mock := &MockTransaction{ctrl: ctrl}
	mock.recorder = &MockTransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTransaction) EXPECT() *MockTransactionMockRecorder {
	return m.recorder
}

// CreatePayment mocks base method
func (m *MockTransaction) CreatePayment(arg0 string, arg1 float64) (*model.Transaction, error) {
	ret := m.ctrl.Call(m, "CreatePayment", arg0, arg1)
	ret0, _ := ret[0].(*model.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePayment indicates an expected call of CreatePayment
func (mr *MockTransactionMockRecorder) CreatePayment(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayment", reflect.TypeOf((*MockTransaction)(nil).CreatePayment), arg0, arg1)
}

// CreateRefund mocks base method
func (m *MockTransaction) CreateRefund(arg0 string, arg1 float64) (*model.Transaction, error) {
	ret := m.ctrl.Call(m, "CreateRefund", arg0, arg1)
	ret0, _ := ret[0].(*model.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRefund indicates an expected call of CreateRefund
func (mr *MockTransactionMockRecorder) CreateRefund(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRefund", reflect.TypeOf((*MockTransaction)(nil).CreateRefund), arg0, arg1)
}

// GetListByCard mocks base method
func (m *MockTransaction) GetListByCard(arg0 string) ([]*model.Transaction, error) {
	ret := m.ctrl.Call(m, "GetListByCard", arg0)
	ret0, _ := ret[0].([]*model.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByCard indicates an expected call of GetListByCard
func (mr *MockTransactionMockRecorder) GetListByCard(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByCard", reflect.TypeOf((*MockTransaction)(nil).GetListByCard), arg0)
}
