// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ferruvich/curve-prepaid-card/internal/database (interfaces: Card)

// Package database is a generated GoMock package.
package database

import (
	sql "database/sql"
	model "github.com/ferruvich/curve-prepaid-card/internal/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCard is a mock of Card interface
type MockCard struct {
	ctrl     *gomock.Controller
	recorder *MockCardMockRecorder
}

// MockCardMockRecorder is the mock recorder for MockCard
type MockCardMockRecorder struct {
	mock *MockCard
}

// NewMockCard creates a new mock instance
func NewMockCard(ctrl *gomock.Controller) *MockCard {
	mock := &MockCard{ctrl: ctrl}
	mock.recorder = &MockCardMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCard) EXPECT() *MockCardMockRecorder {
	return m.recorder
}

// Read mocks base method
func (m *MockCard) Read(arg0 *sql.DB, arg1 string) (*model.Card, error) {
	ret := m.ctrl.Call(m, "Read", arg0, arg1)
	ret0, _ := ret[0].(*model.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockCardMockRecorder) Read(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockCard)(nil).Read), arg0, arg1)
}

// Update mocks base method
func (m *MockCard) Update(arg0 *sql.DB, arg1 *model.Card) error {
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockCardMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCard)(nil).Update), arg0, arg1)
}

// Write mocks base method
func (m *MockCard) Write(arg0 *sql.DB, arg1 *model.Card) error {
	ret := m.ctrl.Call(m, "Write", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write
func (mr *MockCardMockRecorder) Write(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockCard)(nil).Write), arg0, arg1)
}
