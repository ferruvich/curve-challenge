// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ferruvich/curve-prepaid-card/internal/database (interfaces: AuthorizationRequest)

// Package database is a generated GoMock package.
package database

import (
	model "github.com/ferruvich/curve-prepaid-card/internal/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAuthorizationRequest is a mock of AuthorizationRequest interface
type MockAuthorizationRequest struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationRequestMockRecorder
}

// MockAuthorizationRequestMockRecorder is the mock recorder for MockAuthorizationRequest
type MockAuthorizationRequestMockRecorder struct {
	mock *MockAuthorizationRequest
}

// NewMockAuthorizationRequest creates a new mock instance
func NewMockAuthorizationRequest(ctrl *gomock.Controller) *MockAuthorizationRequest {
	mock := &MockAuthorizationRequest{ctrl: ctrl}
	mock.recorder = &MockAuthorizationRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthorizationRequest) EXPECT() *MockAuthorizationRequestMockRecorder {
	return m.recorder
}

// Read mocks base method
func (m *MockAuthorizationRequest) Read(arg0 string) (*model.AuthorizationRequest, error) {
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(*model.AuthorizationRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockAuthorizationRequestMockRecorder) Read(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockAuthorizationRequest)(nil).Read), arg0)
}

// Update mocks base method
func (m *MockAuthorizationRequest) Update(arg0 *model.AuthorizationRequest) error {
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockAuthorizationRequestMockRecorder) Update(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAuthorizationRequest)(nil).Update), arg0)
}

// Write mocks base method
func (m *MockAuthorizationRequest) Write(arg0 *model.AuthorizationRequest) error {
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write
func (mr *MockAuthorizationRequestMockRecorder) Write(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockAuthorizationRequest)(nil).Write), arg0)
}
