// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ferruvich/curve-prepaid-card/internal/database (interfaces: DBTransaction)

// Package database is a generated GoMock package.
package database

import (
	sql "database/sql"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDBTransaction is a mock of DBTransaction interface
type MockDBTransaction struct {
	ctrl     *gomock.Controller
	recorder *MockDBTransactionMockRecorder
}

// MockDBTransactionMockRecorder is the mock recorder for MockDBTransaction
type MockDBTransactionMockRecorder struct {
	mock *MockDBTransaction
}

// NewMockDBTransaction creates a new mock instance
func NewMockDBTransaction(ctrl *gomock.Controller) *MockDBTransaction {
	mock := &MockDBTransaction{ctrl: ctrl}
	mock.recorder = &MockDBTransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDBTransaction) EXPECT() *MockDBTransactionMockRecorder {
	return m.recorder
}

// Exec mocks base method
func (m *MockDBTransaction) Exec(arg0 string, arg1 ...interface{}) (sql.Result, error) {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec
func (mr *MockDBTransactionMockRecorder) Exec(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockDBTransaction)(nil).Exec), varargs...)
}

// Prepare mocks base method
func (m *MockDBTransaction) Prepare(arg0 string) (*sql.Stmt, error) {
	ret := m.ctrl.Call(m, "Prepare", arg0)
	ret0, _ := ret[0].(*sql.Stmt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Prepare indicates an expected call of Prepare
func (mr *MockDBTransactionMockRecorder) Prepare(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prepare", reflect.TypeOf((*MockDBTransaction)(nil).Prepare), arg0)
}

// Query mocks base method
func (m *MockDBTransaction) Query(arg0 string, arg1 ...interface{}) (*sql.Rows, error) {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(*sql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query
func (mr *MockDBTransactionMockRecorder) Query(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockDBTransaction)(nil).Query), varargs...)
}

// QueryRow mocks base method
func (m *MockDBTransaction) QueryRow(arg0 string, arg1 ...interface{}) *sql.Row {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRow", varargs...)
	ret0, _ := ret[0].(*sql.Row)
	return ret0
}

// QueryRow indicates an expected call of QueryRow
func (mr *MockDBTransactionMockRecorder) QueryRow(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRow", reflect.TypeOf((*MockDBTransaction)(nil).QueryRow), varargs...)
}
