// Code generated by MockGen. DO NOT EDIT.
// Source: pipeline.go

// Package database is a generated GoMock package.
package database

import (
	sql "database/sql"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPipeline is a mock of Pipeline interface
type MockPipeline struct {
	ctrl     *gomock.Controller
	recorder *MockPipelineMockRecorder
}

// MockPipelineMockRecorder is the mock recorder for MockPipeline
type MockPipelineMockRecorder struct {
	mock *MockPipeline
}

// NewMockPipeline creates a new mock instance
func NewMockPipeline(ctrl *gomock.Controller) *MockPipeline {
	mock := &MockPipeline{ctrl: ctrl}
	mock.recorder = &MockPipelineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPipeline) EXPECT() *MockPipelineMockRecorder {
	return m.recorder
}

// makeQuery mocks base method
func (m *MockPipeline) makeQuery(arg0 Transaction) (*sql.Rows, error) {
	ret := m.ctrl.Call(m, "makeQuery", arg0)
	ret0, _ := ret[0].(*sql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// makeQuery indicates an expected call of makeQuery
func (mr *MockPipelineMockRecorder) makeQuery(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "makeQuery", reflect.TypeOf((*MockPipeline)(nil).makeQuery), arg0)
}
